# Generated from ./CQL.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,28,174,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,1,1,1,1,1,1,2,1,
        2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,5,6,92,8,6,10,6,12,6,95,9,6,1,7,4,
        7,98,8,7,11,7,12,7,99,1,8,1,8,1,8,5,8,105,8,8,10,8,12,8,108,9,8,
        1,8,1,8,1,9,1,9,1,9,1,9,3,9,116,8,9,1,10,1,10,1,10,5,10,121,8,10,
        10,10,12,10,124,9,10,1,10,1,10,1,11,1,11,1,11,1,11,3,11,132,8,11,
        1,12,4,12,135,8,12,11,12,12,12,136,1,12,1,12,1,13,1,13,1,14,1,14,
        1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,
        1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,
        1,28,1,28,1,29,1,29,2,106,122,0,30,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,0,21,10,23,0,25,11,27,12,29,13,31,14,33,15,35,16,37,
        17,39,18,41,19,43,20,45,21,47,22,49,23,51,24,53,25,55,26,57,27,59,
        28,1,0,4,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,
        48,57,3,0,9,10,13,13,32,32,180,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,21,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        1,61,1,0,0,0,3,63,1,0,0,0,5,66,1,0,0,0,7,68,1,0,0,0,9,71,1,0,0,0,
        11,78,1,0,0,0,13,89,1,0,0,0,15,97,1,0,0,0,17,101,1,0,0,0,19,115,
        1,0,0,0,21,117,1,0,0,0,23,131,1,0,0,0,25,134,1,0,0,0,27,140,1,0,
        0,0,29,142,1,0,0,0,31,144,1,0,0,0,33,146,1,0,0,0,35,148,1,0,0,0,
        37,150,1,0,0,0,39,152,1,0,0,0,41,154,1,0,0,0,43,156,1,0,0,0,45,158,
        1,0,0,0,47,160,1,0,0,0,49,162,1,0,0,0,51,164,1,0,0,0,53,166,1,0,
        0,0,55,168,1,0,0,0,57,170,1,0,0,0,59,172,1,0,0,0,61,62,5,58,0,0,
        62,2,1,0,0,0,63,64,5,33,0,0,64,65,5,61,0,0,65,4,1,0,0,0,66,67,5,
        44,0,0,67,6,1,0,0,0,68,69,5,45,0,0,69,70,5,62,0,0,70,8,1,0,0,0,71,
        72,5,87,0,0,72,73,5,73,0,0,73,74,5,84,0,0,74,75,5,72,0,0,75,76,5,
        73,0,0,76,77,5,78,0,0,77,10,1,0,0,0,78,79,5,67,0,0,79,80,5,79,0,
        0,80,81,5,78,0,0,81,82,5,84,0,0,82,83,5,65,0,0,83,84,5,73,0,0,84,
        85,5,78,0,0,85,86,5,73,0,0,86,87,5,78,0,0,87,88,5,71,0,0,88,12,1,
        0,0,0,89,93,7,0,0,0,90,92,7,1,0,0,91,90,1,0,0,0,92,95,1,0,0,0,93,
        91,1,0,0,0,93,94,1,0,0,0,94,14,1,0,0,0,95,93,1,0,0,0,96,98,7,2,0,
        0,97,96,1,0,0,0,98,99,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,16,
        1,0,0,0,101,106,5,34,0,0,102,105,3,19,9,0,103,105,9,0,0,0,104,102,
        1,0,0,0,104,103,1,0,0,0,105,108,1,0,0,0,106,107,1,0,0,0,106,104,
        1,0,0,0,107,109,1,0,0,0,108,106,1,0,0,0,109,110,5,34,0,0,110,18,
        1,0,0,0,111,112,5,92,0,0,112,116,5,34,0,0,113,114,5,92,0,0,114,116,
        5,92,0,0,115,111,1,0,0,0,115,113,1,0,0,0,116,20,1,0,0,0,117,122,
        5,39,0,0,118,121,3,23,11,0,119,121,9,0,0,0,120,118,1,0,0,0,120,119,
        1,0,0,0,121,124,1,0,0,0,122,123,1,0,0,0,122,120,1,0,0,0,123,125,
        1,0,0,0,124,122,1,0,0,0,125,126,5,39,0,0,126,22,1,0,0,0,127,128,
        5,92,0,0,128,132,5,39,0,0,129,130,5,92,0,0,130,132,5,92,0,0,131,
        127,1,0,0,0,131,129,1,0,0,0,132,24,1,0,0,0,133,135,7,3,0,0,134,133,
        1,0,0,0,135,136,1,0,0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,138,
        1,0,0,0,138,139,6,12,0,0,139,26,1,0,0,0,140,141,5,60,0,0,141,28,
        1,0,0,0,142,143,5,62,0,0,143,30,1,0,0,0,144,145,5,47,0,0,145,32,
        1,0,0,0,146,147,5,61,0,0,147,34,1,0,0,0,148,149,5,91,0,0,149,36,
        1,0,0,0,150,151,5,93,0,0,151,38,1,0,0,0,152,153,5,40,0,0,153,40,
        1,0,0,0,154,155,5,41,0,0,155,42,1,0,0,0,156,157,5,33,0,0,157,44,
        1,0,0,0,158,159,5,42,0,0,159,46,1,0,0,0,160,161,5,43,0,0,161,48,
        1,0,0,0,162,163,5,63,0,0,163,50,1,0,0,0,164,165,5,123,0,0,165,52,
        1,0,0,0,166,167,5,125,0,0,167,54,1,0,0,0,168,169,5,38,0,0,169,56,
        1,0,0,0,170,171,5,124,0,0,171,58,1,0,0,0,172,173,5,45,0,0,173,60,
        1,0,0,0,10,0,93,99,104,106,115,120,122,131,136,1,6,0,0
    ]

class CQLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    WITHIN = 5
    CONTAINING = 6
    NAME = 7
    NUMBER = 8
    DOUBLE_QUOTED_STRING = 9
    SINGLE_QUOTED_STRING = 10
    WS = 11
    LT = 12
    GT = 13
    SOLIDUS = 14
    EQUALS = 15
    LEFT_SQUARE_BRACKET = 16
    RIGHT_SQUARE_BRACKET = 17
    LEFT_PARENTHESIS = 18
    RIGHT_PARENTHESIS = 19
    EXCLAMATION_MARK = 20
    ASTERISK = 21
    PLUS = 22
    QUESTION_MARK = 23
    LEFT_CURLY_BRACKET = 24
    LEFT_RIGHT_BRACKET = 25
    AMPERSAND = 26
    VERTICAL_LINE = 27
    HYPHEN_MINUS = 28

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':'", "'!='", "','", "'->'", "'WITHIN'", "'CONTAINING'", "'<'", 
            "'>'", "'/'", "'='", "'['", "']'", "'('", "')'", "'!'", "'*'", 
            "'+'", "'?'", "'{'", "'}'", "'&'", "'|'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "WITHIN", "CONTAINING", "NAME", "NUMBER", "DOUBLE_QUOTED_STRING", 
            "SINGLE_QUOTED_STRING", "WS", "LT", "GT", "SOLIDUS", "EQUALS", 
            "LEFT_SQUARE_BRACKET", "RIGHT_SQUARE_BRACKET", "LEFT_PARENTHESIS", 
            "RIGHT_PARENTHESIS", "EXCLAMATION_MARK", "ASTERISK", "PLUS", 
            "QUESTION_MARK", "LEFT_CURLY_BRACKET", "LEFT_RIGHT_BRACKET", 
            "AMPERSAND", "VERTICAL_LINE", "HYPHEN_MINUS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "WITHIN", "CONTAINING", 
                  "NAME", "NUMBER", "DOUBLE_QUOTED_STRING", "DOUBLE_QUOTED_ESC", 
                  "SINGLE_QUOTED_STRING", "SINGLE_QUOTED_ESC", "WS", "LT", 
                  "GT", "SOLIDUS", "EQUALS", "LEFT_SQUARE_BRACKET", "RIGHT_SQUARE_BRACKET", 
                  "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", "EXCLAMATION_MARK", 
                  "ASTERISK", "PLUS", "QUESTION_MARK", "LEFT_CURLY_BRACKET", 
                  "LEFT_RIGHT_BRACKET", "AMPERSAND", "VERTICAL_LINE", "HYPHEN_MINUS" ]

    grammarFileName = "CQL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


